<div>
  <div>
    <h1>Bienvenido {{user.name}} </h1>
    <p>Mail:{{user.email}}</p>
    <p>Edad:{{user.age}}</p>
    <p>Rol:{{user.rol}}</p>
  </div>
  
  <button id="logout" onclick="logoutButtonEvent()">Logout</button>

  <table class="table">
    <thead>
      <tr>
        <th scope="col"> Title </th>
        <th scope="col"> Descripcion </th>
        <th scope="col"> Price </th>
        <th scope="col"> Thumbnail </th>
        <th scope="col"> Code </th>
        <th scope="col"> Stock </th>
      </tr>
    </thead>
    <tbody>
      {{#each products.docs}}
        <tr>
          <td> {{this.title}}</td>
          <td> {{this.descripcion}}</td>
          <td> {{this.price}} </td>
          <td> {{this.thumbnail}}</td>
          <td> {{this.code}}</td>
          <td> {{this.stock}} </td>
          <td><button onclick="addToCart('{{this._id}}')">Agregar al Carrito</button></td>
        </tr>
      {{/each}}

    </tbody>

  </table>
  <div class="position-relative m-4">

    <nav aria-label="Page navigation example">
      <ul class="pagination">
        {{#if products.hasPrevPage}}
          <li class="page-item"><a
              class="page-link"
              href="/products?page={{products.prevPage}}&&limit=10"
            >Previous</a></li>
        {{/if}}

        {{#if products.hasNextPage}}
          <li class="page-item"><a
              class="page-link"
              href="/products?page={{products.nextPage}}&&limit=10"
            >Next</a></li>
        {{/if}}

      </ul>
    </nav>
    <p class="btn btn-primary">
      Current Page:
      {{products.page}}
    </p>
  </div>

  <button id="purchaseview" onclick="functionPurchase()">Ir al carrito</button>
</div>

<script>

  let userCartId = "{{UserCartId}}";

  function changeLimit(newLimit) {
    window.location.href = `/products?page=1&limit=${newLimit}`
  }
  
  async function createCartOnLoad(productId) {
    try {
      console.log('ID del producto:', productId);
      const response = await fetch('/api/carts/empty', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ products: [] })
      });
      if (response.ok) {
        const data = await response.json();
        userCartId = data.cartCreated._id;
        
        const updateResponse = await fetch('http://localhost:8080/users/users/updateCartId', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ cart_id: userCartId })
        });

        if (!updateResponse.ok) {
          throw new Error('Error al actualizar el cart ID en la sesión y base de datos');
        }

      } else {
        throw new Error('Error al crear el carrito');
      }
    } catch (error) {
      console.error(error);
    }
  }

  async function getUserData() {
    try {
      const response = await fetch('/users/userdata', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
      });
      if (response.ok) {
        
        const userData = await response.json();
        console.log(userData)
        if (userData.user && userData.user.cart_id) {
          userCartId = userData.user.cart_id;
          console.log('ID del carrito del usuario:', userCartId);
        } else {
          console.log('El usuario no tiene un carrito asignado aún.');
        }
      } else {
        throw new Error('Error al obtener los datos del usuario');
      }
    } catch (error) {
      console.error(error);
    }
  }

  async function checkAndInitializeCart() {
    if (userCartId) {
      await getUserData();
    } else {
      await createCartOnLoad();
    }
  }

  window.onload = async function() {
    await checkAndInitializeCart();
  };

  async function addToCart(productId) {
    try {
      const response = await fetch(`/api/carts/${userCartId}/product/${productId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ quantity: 1 }) 
      });

      if (response.ok) {
        alert('Producto agregado al carrito correctamente');
      } else {
        throw new Error('Error al agregar el producto al carrito');
      }
    } catch (error) {
      console.error(error);
      alert('Error al agregar el producto al carrito');
    }
  }

  function logoutButtonEvent(){
    fetch('/api/sessions/logout', {
      method:"GET",
      headers:{
        'Content-Type': 'application/json'
      }
    }).then(result => {
      console.log(result.status)
      if(result.status === 200) window.location.replace('/users/login')
    })
  }

  function functionPurchase(){
    window.location.replace("api/carts/purchase/cart")
  }

</script>