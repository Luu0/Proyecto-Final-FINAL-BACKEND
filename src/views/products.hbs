<div>
  <div>
    <h1>Bienvenido {{user.name}} </h1>
    <p>Mail:{{user.email}}</p>
    <p>Edad:{{user.age}}</p>
    <p>Rol:{{user.rol}}</p>
  </div>
  
  <button id="logout" onclick="logoutButtonEvent()">Logout</button>

  <table class="table">
    <thead>
      <tr>
        <th scope="col"> Title </th>
        <th scope="col"> Descripcion </th>
        <th scope="col"> Price </th>
        <th scope="col"> Thumbnail </th>
        <th scope="col"> Code </th>
        <th scope="col"> Stock </th>
      </tr>
    </thead>
    <tbody>
      {{#each products.docs}}
        <tr>
          <td> {{this.title}}</td>
          <td> {{this.descripcion}}</td>
          <td> {{this.price}} </td>
          <td> {{this.thumbnail}}</td>
          <td> {{this.code}}</td>
          <td> {{this.stock}} </td>
          <td><button onclick="addToCart('{{this._id}}')">Agregar al Carrito</button></td>
        </tr>
      {{/each}}

    </tbody>

  </table>
  <div class="position-relative m-4">

    <nav aria-label="Page navigation example">
      <ul class="pagination">
        {{#if products.hasPrevPage}}
          <li class="page-item"><a
              class="page-link"
              href="/products?page={{products.prevPage}}&&limit=10"
            >Previous</a></li>
        {{/if}}

        {{!-- Links a siguientes páginas --}}

        {{#if products.hasNextPage}}
          <li class="page-item"><a
              class="page-link"
              href="/products?page={{products.nextPage}}&&limit=10"
            >Next</a></li>
        {{/if}}

      </ul>
    </nav>
    <p class="btn btn-primary">
      Current Page:
      {{products.page}}
    </p>
  </div>
</div>

<script>

  let userCartId;

  function changeLimit(newLimit) {
    window.location.href = `/products?page=1&limit=${newLimit}`
  }
  
  async function createCartOnLoad(productId) {
    try {
      console.log('ID del producto:', productId);
      const response = await fetch('/api/carts/empty', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ products: [] })
      });
      if (response.ok) {
        const data = await response.json();
        console.log('Carrito creado exitosamente al cargar la página', data.cartCreated._id);
        userCartId = data.cartCreated._id;
      } else {
        throw new Error('Error al crear el carrito');
      }
    } catch (error) {
      console.error(error);
    }
  }

  window.onload = createCartOnLoad;

  async function addToCart(productId) {
    console.log(productId)
    try {
      const response = await fetch(`/api/carts/${userCartId}/product/${productId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ quantity: 1 }) // Puedes enviar la cantidad como desees
      });

      if (response.ok) {
        alert('Producto agregado al carrito correctamente');
        // Puedes realizar cualquier otra acción necesaria después de agregar el producto al carrito
      } else {
        throw new Error('Error al agregar el producto al carrito');
      }
    } catch (error) {
      console.error(error);
      alert('Error al agregar el producto al carrito');
    }
  }

  function logoutButtonEvent(){
    fetch('/api/sessions/logout', {
      method:"GET",
      headers:{
        'Content-Type': 'application/json'
      }
    }).then(result => {
      console.log(result.status)
      if(result.status === 200) window.location.replace('/users/login')
    })
  }

</script>